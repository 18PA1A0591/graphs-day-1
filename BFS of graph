
class Solution:
    def bfsOfGraph(self, V, adj):
        # code here
        v=0
        ans=[]
        visited=[False]*V
        queue=[0]
        visited[v] = True
        while queue:
            v = queue.pop(0)
            ans.append(v)
            for i in adj[v]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True
        return ans



#{ 
#  Driver Code Starts
if __name__ == '__main__':
    T=int(input())
    for i in range(T):
        V, E = map(int, input().split())
        adj = [[] for i in range(V)]
        for _ in range(E):
            u, v = map(int, input().split())
            adj[u].append(v)
        ob = Solution()
        ans = ob.bfsOfGraph(V, adj)
        for i in range(len(ans)):
            print(ans[i], end = " ")
        print()
        

# } Driver Code Ends
